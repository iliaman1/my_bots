import requests
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Text
from aiogram.types import (KeyboardButton, Message, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove, KeyboardButtonPollType)
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from config_data.config import load_config

config = load_config('config_data/.env')

bot_token = config.tg_bot.token

bot: Bot = Bot(bot_token)
dp: Dispatcher = Dispatcher()

# # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫
# button_1: KeyboardButton = KeyboardButton(text='–°–æ–±–∞–∫ ü¶Æ')
# button_2: KeyboardButton = KeyboardButton(text='–û–≥—É—Ä—Ü–æ–≤ ü•í')
#
# # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ –∫–Ω–æ–ø–∫–∏
# keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
#     keyboard=[[button_1, button_2]],
#     resize_keyboard=True,
#     one_time_keyboard=True
# )


kp_builder: ReplyKeyboardBuilder = ReplyKeyboardBuilder()
buttons_1: list[KeyboardButton] = [
    KeyboardButton(text='–°–æ–±–∞–∫ ü¶Æ'),
    KeyboardButton(text='–û–≥—É—Ä—Ü–æ–≤ ü•í'),
    KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', request_contact=True),
    KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location=True),
    KeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É/–æ–ø—Ä–æ—Å', request_poll=KeyboardButtonPollType()),
    KeyboardButton(text='–°–æ–±–∞–∫ ü¶Æ'),
    KeyboardButton(text='–û–≥—É—Ä—Ü–æ–≤ ü•í')
]
buttons_2: list[KeyboardButton] = [KeyboardButton(text=f'–ö–Ω–æ–ø–∫–∞ {i + 6}') for i in range(4)]
# kp_builder.row(*buttons_1, width=4)
# kp_builder.row(*buttons_2, width=3)
# # –ª—è –∫–∞–∫ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ add
# kp_builder.add(*buttons_2)
# # –ª—è –∫–∞–∫ —á–µ—Ä–µ–∑ add –∏ adjust
kp_builder.add(*buttons_1)
kp_builder.adjust(2, 1, repeat=True)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(text='–ß–µ–≥–æ –∫–æ—à–∫–∏ –±–æ—è—Ç—Å—è –±–æ–ª—å—à–µ? –ó–∞–æ–¥–Ω–æ –∑–∞—Ü–µ–Ω–∏ –∫–ª–∞–≤—É)',
                         reply_markup=kp_builder.as_markup(resize_keyboard=True))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–≤–µ—Ç "–°–æ–±–∞–∫ ü¶Æ" –∏ —É–¥–∞–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message(Text(text='–°–æ–±–∞–∫ ü¶Æ'))
async def process_dog_answer(message: Message):
    cat_response = requests.get('https://aws.random.cat/meow')

    if cat_response.status_code == 200:
        cat_link = cat_response.json()['file']
        await bot.send_photo(chat_id=message.chat.id, photo=cat_link)
    else:
        await bot.send_message(chat_id=message.chat.id, text='—Ç—É—Ç –º–æ–≥ –±—ã—Ç—å –∫–æ—Ç–∏–∫')
    await message.answer(text='–î–∞, –Ω–µ—Å–æ–º–Ω–µ–Ω–Ω–æ, –∫–æ—à–∫–∏ –±–æ—è—Ç—Å—è —Å–æ–±–∞–∫. '
                              '–ù–æ –≤—ã –≤–∏–¥–µ–ª–∏ –∫–∞–∫ –æ–Ω–∏ –±–æ—è—Ç—Å—è –æ–≥—É—Ä—Ü–æ–≤?')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–≤–µ—Ç "–û–≥—É—Ä—Ü–æ–≤ ü•í" –∏ —É–¥–∞–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message(Text(text='–û–≥—É—Ä—Ü–æ–≤ ü•í'))
async def process_cucumber_answer(message: Message):
    cat_response = requests.get('https://aws.random.cat/meow')

    if cat_response.status_code == 200:
        cat_link = cat_response.json()['file']
        await bot.send_photo(chat_id=message.chat.id, photo=cat_link)
    else:
        await bot.send_message(chat_id=message.chat.id, text='—Ç—É—Ç –º–æ–≥ –±—ã—Ç—å –∫–æ—Ç–∏–∫')
    await message.answer(text='–î–∞, –∏–Ω–æ–≥–¥–∞ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –æ–≥—É—Ä—Ü–æ–≤ '
                              '–∫–æ—à–∫–∏ –±–æ—è—Ç—Å—è –±–æ–ª—å—à–µ')


if __name__ == '__main__':
    dp.run_polling(bot)
