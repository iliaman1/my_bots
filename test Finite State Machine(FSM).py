import logging
import asyncio

from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from config_data.config import Config, load_config
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, Text, StateFilter
from aiogram.filters.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message, BotCommand
from aiogram.utils.keyboard import InlineKeyboardBuilder

logger = logging.getLogger(__name__)


async def set_menu(bot: Bot):
    main_menu_commands = [
        BotCommand(command='/help', description='–°–ø—Ä–∞–≤–∫–∞'),
        BotCommand(command='/start', description='–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'),
        BotCommand(command='/fillform', description='–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã'),
        BotCommand(command='/showdata', description='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã'),
        BotCommand(command='/cancel', description='–ü—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã'),
    ]

    await bot.set_my_commands(main_menu_commands)


def fill_gender_keyboard() -> InlineKeyboardMarkup:
    mk_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    male_button = InlineKeyboardButton(
        text='–ú—É–∂—Å–∫–æ–π ‚ôÇ',
        callback_data='male'
    )
    female_button = InlineKeyboardButton(
        text='–ñ–µ–Ω—Å–∫–∏–π ‚ôÄ',
        callback_data='female'
    )
    undefined_button = InlineKeyboardButton(
        text='ü§∑ –ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ',
        callback_data='undefined_gender'
    )
    return mk_builder.row(*[male_button, female_button, undefined_button], width=2).as_markup(resize_keyboard=True)


def fill_education_keyboard() -> InlineKeyboardMarkup:
    mk_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    secondary_button = InlineKeyboardButton(
        text='–°—Ä–µ–¥–Ω–µ–µ',
        callback_data='secondary'
    )
    higher_button = InlineKeyboardButton(
        text='–í—ã—Å—à–µ–µ',
        callback_data='higher'
    )
    no_edu_button = InlineKeyboardButton(
        text='ü§∑ –ù–µ—Ç—É',
        callback_data='no_edu'
    )
    return mk_builder.row(*[secondary_button, higher_button, no_edu_button], width=2).as_markup(resize_keyboard=True)


def subscribe_news_accept() -> InlineKeyboardMarkup:
    mk_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    yes_news_button = InlineKeyboardButton(
        text='–î–∞',
        callback_data='yes_news'
    )
    no_news_button = InlineKeyboardButton(
        text='–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ',
        callback_data='no_news'
    )
    return mk_builder.row(*[yes_news_button, no_news_button]).as_markup(resize_keyboard=True)


async def main():
    logging.basicConfig(
        level=logging.INFO,
        format=u'%(filename)s:%(lineno)d #%(levelname)-8s '
               u'[%(asctime)s] - %(name)s - %(message)s')

    logger.info('Starting bot')

    config: Config = load_config('config_data/.env')

    storage: MemoryStorage = MemoryStorage()

    bot: Bot = Bot(token=config.tg_bot.token, parse_mode='HTML')
    dp: Dispatcher = Dispatcher(storage=storage)

    user_dict: dict[int, dict[str, str | int]] = {}

    class FSMFillForm(StatesGroup):
        fill_name = State()
        fill_age = State()
        fill_gender = State()
        upload_photo = State()
        fill_education = State()
        fill_wish_news = State()

    async def process_start_command(message: Message):
        await message.answer(
            text='–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É FSM\n\n'
                 '–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã - '
                 '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /fillform'
        )

    async def process_fillform_command(message: Message, state: FSMContext):
        await message.answer(
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤—ã—à–µ –∏–º—è',
        )
        await state.set_state(FSMFillForm.fill_name)

    async def warning_not_name(message: Message):
        await message.answer(
            text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è\n\n'
                 '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è\n\n'
                 '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - '
                 '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
        )

    async def process_name_sent(message: Message, state: FSMContext):
        await state.update_data(name=message.text)
        await message.answer(text=f"–°–ø–∞—Å–∏–±–æ, {message.text}!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç")
        await state.set_state(FSMFillForm.fill_age)

    async def warning_not_age(message: Message):
        await message.answer(
            text='–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 4 –¥–æ 120\n\n'
                 '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å '
                 '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
        )

    async def process_age_sent(message: Message, state: FSMContext):
        await state.update_data(age=int(message.text))
        current_data = await state.get_data()
        await message.answer(
            text=f"–°–ø–∞—Å–∏–±–æ, {current_data['name']}!\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª",
            reply_markup=fill_gender_keyboard()
        )
        await state.set_state(FSMFillForm.fill_gender)

    async def warning_not_gender(message: Message):
        await message.answer(
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ '
                 '–ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å '
                 '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
        )

    async def process_gender_sent(callback: CallbackQuery, state: FSMContext):
        await state.update_data(gender=callback.data)
        await callback.message.delete()
        await callback.message.answer(
            text='–°–ø–∞—Å–∏–±–æ! –ê —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ, '
                 '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ —Ñ–æ—Ç–æ'
        )
        await state.set_state(FSMFillForm.upload_photo)

    async def warning_not_photo(message: Message):
        await message.answer(
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '
                 '–≤–∞—à–µ —Ñ–æ—Ç–æ\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å '
                 '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
        )

    async def process_photo_sent(message: Message, state: FSMContext):
        await state.update_data(photo_unique_id=message.photo[0].file_unique_id, photo_id=message.photo[0].file_id)
        await message.answer(
            text='–°–ø–∞—Å–∏–±–æ!\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
            reply_markup=fill_education_keyboard()
        )
        await state.set_state(FSMFillForm.fill_education)

    async def warning_not_education(message: Message):
        await message.answer(
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ '
                 '–ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ '
                 '–ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '
                 '–∫–æ–º–∞–Ω–¥—É /cancel'
        )

    async def process_education_press(callback: CallbackQuery, state: FSMContext):
        await state.update_data(education=callback.data)
        await callback.message.edit_text(
            text='–°–ø–∞—Å–∏–±–æ!\n\n'
                 '–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥.\n'
                 '–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏?',
            reply_markup=subscribe_news_accept()
        )
        await state.set_state(FSMFillForm.fill_wish_news)

    async def warning_not_wish_news(message: Message):
        await message.answer(
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏!\n\n'
                 '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - '
                 '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
        )

    async def process_wish_news_press(callback: CallbackQuery, state: FSMContext):
        await state.update_data(wish_news=True if callback.data == 'yes_news' else False)
        user_dict[callback.from_user.id] = await state.get_data()
        await state.clear()
        await callback.message.edit_text(
            text='–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n'
                 '–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π'
        )
        await callback.message.answer(
            text='–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π '
                 '–∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /showdata'
        )

    async def process_showdata_command(message: Message):
        if message.from_user.id in user_dict:
            await message.answer_photo(
                photo=user_dict[message.from_user.id]['photo_id'],
                caption=f'–ò–º—è: {user_dict[message.from_user.id]["name"]}\n'
                        f'–í–æ–∑—Ä–∞—Å—Ç: {user_dict[message.from_user.id]["age"]}\n'
                        f'–ü–æ–ª: {user_dict[message.from_user.id]["gender"]}\n'
                        f'–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {user_dict[message.from_user.id]["education"]}\n'
                        f'–ü–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: {user_dict[message.from_user.id]["wish_news"]}'
            )
        else:
            await message.answer(
                text='–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –∞–Ω–∫–µ—Ç—É. '
                     '–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '
                     '–∫–æ–º–∞–Ω–¥—É /fillform'
            )

    async def process_cancel_command(messasge: Message, state: FSMContext):
        await messasge.answer(
            text='–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π\n\n'
                 '–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã - '
                 '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /fillform'
        )
        await state.clear()

    async def send_echo(message: Message):
        await message.reply(
            text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å'
        )

    dp.message.register(process_start_command, Command(commands=['start']))
    dp.message.register(process_fillform_command, Command(commands=['fillform']))
    dp.message.register(process_cancel_command, Command(commands=['cancel']), StateFilter('*'))
    dp.message.register(process_showdata_command, Command(commands=['showdata']))

    dp.message.register(process_name_sent, FSMFillForm.fill_name, lambda x: x.text.isalpha())
    dp.message.register(warning_not_name, FSMFillForm.fill_name)
    dp.message.register(process_age_sent, FSMFillForm.fill_age, lambda x: x.text.isdigit() and 4 <= int(x.text) <= 120)
    dp.message.register(warning_not_age, FSMFillForm.fill_age)

    dp.callback_query.register(process_gender_sent, FSMFillForm.fill_gender,
                               Text(text=['male', 'female', 'undefined_gender']))
    dp.message.register(warning_not_gender, FSMFillForm.fill_gender)
    dp.message.register(process_photo_sent, FSMFillForm.upload_photo, F.photo)
    dp.message.register(warning_not_photo, FSMFillForm.upload_photo)
    dp.callback_query.register(process_education_press, FSMFillForm.fill_education,
                               Text(text=['secondary', 'higher', 'no_edu']))
    dp.message.register(warning_not_education, FSMFillForm.fill_education)
    dp.callback_query.register(process_wish_news_press, FSMFillForm.fill_wish_news, Text(text=['yes_news', 'no_news']))
    dp.message.register(warning_not_wish_news, FSMFillForm.fill_wish_news)
    dp.message.register(send_echo)

    await set_menu(bot)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except(KeyboardInterrupt, SystemExit):
        logger.error('Bot stopped!')
